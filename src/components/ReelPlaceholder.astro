---
import { frontmatter } from '../settings/Settings.md'
import { imagePath } from '../settings/siteInfo'
import BaseModal from './BaseModal.astro'
import VimeoPlayer from './VimeoPlayer.svelte'

const reelModalTriggerId = 'reel-slideshow'
const cloudinaryTransforms = {
  slide: '/c_limit,w_1920', // limit to 1080p width
  slideBg: '/w_48'
}
---
<>
  <a
    class="slideshow"
    href={frontmatter.reel.vimeoUrl}
    data-slideshow
    id={reelModalTriggerId}
  >
    <div class="slide-container">
      {frontmatter.reel.placeholderStills.map((still, i) => (
        <img
          src={imagePath + cloudinaryTransforms.slideBg + still}
          alt=""
          class="slide-bg"
          width="1796"
          height="1010"
          data-slide-bg-index={i}
        >

        <img
          src={imagePath + cloudinaryTransforms.slide + still}
          alt=""
          class="slide"
          width="1796"
          height="1010"
          data-slide-index={i}
        >
      ))}
    </div>

    <div class="play-button">
      <img
        src="/img/play.svg"
        alt=""
        class="play-button-icon"
      >
    </div>
  </a>

  <BaseModal triggerId={reelModalTriggerId} autoplayVimeoPlayer>
    <div
      style="
        display: grid;
        justify-items: center;
        grid-template-columns: 1fr;
        position: fixed;
        width: 100%;
        top: 0;
        left: 50%;
        transform: translate(-50%);
        right: 0;
        bottom: 0;
      "
    >
      <div style="
        display: grid; /* centers player vertically */
        width: 100%;
        max-width: min(16 / 9 * 100vh - 4vh, var(--max-element-width));
      ">
        <VimeoPlayer
          url={frontmatter.reel.vimeoUrl}
          title="Andrew Aiello Reel"
          autoplay={false}
        />
      </div>
    </div>
  </BaseModal>
</>

<script>
  const slides = document.querySelectorAll('[data-slide-index]')
  const slideBgs = document.querySelectorAll('[data-slide-bg-index]')

  let i = 0
  const interval = 3000
  const crossfadeDuration = 3000

  const advanceSlideshow = () => {
    const thisSlide = slides[i % slides.length]
    const thisSlideBg = slideBgs[i % slides.length]

    // Start in-transition
    thisSlide.style.visibility = 'visible'
    thisSlide.classList.add('intro')

    thisSlideBg.style.visibility = 'visible'
    thisSlideBg.classList.add('intro')
    
    // Begin out-transition
    setTimeout(() => {
      thisSlide.classList.replace('intro', 'outro')
      thisSlideBg.classList.replace('intro', 'outro')
    }, interval)
    
    // Complete out-transition
    setTimeout(() => {
      thisSlide.style.visibility = 'hidden'
      thisSlideBg.style.visibility = 'hidden'

      thisSlide.classList.remove('outro')
      thisSlideBg.classList.remove('outro')
    }, interval + crossfadeDuration)
    
    i++
  }

  advanceSlideshow()
  setInterval(() => advanceSlideshow(), interval)
</script>

<style lang="scss">
  [tabindex="-1"] {
    outline: none;
  }

  .slideshow:focus {
    outline: none; // this is bad
  }

  .slideshow {
    position: relative;
    margin: 0;
    width: 100vw;
    min-width: 100%;
    max-width: min(120vh, var(--max-element-width));
    aspect-ratio: 1796 / 1005; /** 
                                * Intentionally shorter than 1010 intrinsic
                                * image height to workaround Safari height miscalculation:
                                */
    align-self: center; 
  }

  .slide-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .slide {
    position: absolute;
    display: block;
    visibility: hidden;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    opacity: 0;
    transition: opacity 1.5s;
    z-index: 2;

    &.intro {
      opacity: 1;
    }
    
    // &.outro {
    //   opacity: 1;
    //   z-index: -1;
    // }
  }

  .slide-bg {
    position: fixed;
    visibility: hidden;
    top: -5%;
    left: 50%;
    transform: translateX(-50%);
    width: 100vw;
    height: 100%;
    object-fit: cover;
    z-index: -10;
    filter: blur(8em) saturate(2);
    opacity: 0;
    transition: opacity 1.5s;
    will-change: opacity;

    &.intro {
      opacity: 0.5;
    }
  }

  .slideshow:hover {
    cursor: pointer;
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 3;
    opacity: 0.75;
    background-color: rgb(0 0 0 / 20%);
    display: flex;
    padding: 0.825em;
    border-radius: 999px;
    transition: 
      opacity 0.25s ease-out,
      background-color 0.25s ease-out;
    
    .slideshow:hover & {
      background-color: rgb(0 0 0 / 60%);
      opacity: 1;
    }
  }

  .play-button-icon {
    width: 1.25em;
    height: 1.25em;
  }
</style>
